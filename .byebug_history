c
json[:data].map { |j| j[:id] }
json[:data]
json
get :index
notes[2].tags.count
notes[1].tags.count
notes.first.tags.count
notes.first.tags.3
notes.first.tags
notes.count
notes
c
json[:data].count
json[:data]
json
exit
\c
c
@res = TagsSerializer.new(@tag).to_json
@tag
n
c
@res = TagsSerializer.new().to_json
@res = TagsSerializer.new()
@res = TagsSerializer.new(@tag)
@res = TagsSerializer.new(@tag).to_json
@tag = Fabricate(:tag)
c
JSON.parse(params)
params.require("data")
params
c
params
c
request.content_type
exit
request.format.symbol
request.format
request.content_type
c
request.content_typec
request.content_type
c
request.content_type
c
request.content_type
c
request.format.symbol
request.content_type
request.format
request.headers["Content-Type"]
request.env["headers"]
request.env[:headers]
request.env.headers
request.env
request.env['content_type']
request.env['content-type']
request.env['CONTENT_TYPE']
request.env['CONTENT-TYPE']
c
request.env["CONTENT_TYPE"]
request.env[:content_type]
request.env["content_type"]
request.env["content-type"]
request.env["CONTENT-TYPE"]
c
n
c
request.env
request.env[:content_type]
request.env['CONTENT_TYPE']
request.env['content_type']
c
request.env['content_type']
request.env['Content-Type']
request.env['CONTENT_TYPE']
request.env['content-type']
request.env
c
response
n
response
n
response
n
results
n
exit
c
params.require(:relationships).require(:tags).require(:data).map(&:attributes)))
params.require(:relationships).require(:tags).require(:data).map(&:attributes))
params.require(:relationships).require(:tags).require(:data).map(permit(:attributes))
params.require(:relationships).require(:tags).require(:data).permit(:attributes)
params.require(:relationships).require(:tags).require(:data)
params.drill(:relationships, :tags, :data)
params.require(:relationships).require(:tags).require(:data)
params.require(:relationships).require(:tags)
params.require(:relationships).require(:tags).permit(:data)
params.require(:relationships).require(:tags)
params
params.require(:relationships)
params.require(:relationships).require(:data)
params.require(:relationships)
permitted_tags_params
permitted_params
c
tags
c
note.tags
note
c
note.tags
note
c
notes
c
n
c
n
result[:data][:attributes].is_a? Array
result[:data][:attributes].is_a? Hash
result[:data][:attributes]
result
expect(result).to include(%q{:self=>"#{api_v1_note_url(note)}"})
result
c
Note.count
c
n
c
patch :update, @note.attributes
patch :update, @note
patch :update, NotesSerializer.new(@note).to_json
c
params = NotesSerializer.new(@note).to_json
@note
c
json[:data].count
json[:data]
json
c
params.require(:data).require(:attributes).permit(:title, :body)
params.require(:data).require(:attributes)
params.require(:data, :attributes)
params.require(:data)
permitted_params
c
params.require(:data).permit(:attributes)
params.require(:data)
params
permitted_params
c
permitted_params
permitted_data
c
@resource
c
n
data
n
c
n
data[:error]
data
n
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
@resource
@resources
c
data
n
@resource
c
@resources.is_a? ActiveRecord::Relation
@resources.size
@resources.count
@resources
@resources.is_a? Array
c
self.request.env['CONTENT_TYPE']
self.request.env.content_type
self.request.env
self.request['CONTENT_TYPE']
self.request['Content-Type']
self.request
self.request.type
self.request
self
this
context
c
note.tags.to_json
note.to_json
note.tags
note
note = Note.includes(:tags).find(1)
note.tags
note = Note.find(1)
note.tags
note
n
